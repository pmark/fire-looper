
<!DOCTYPE html>
<html>
<head>
    <title>Leaflet debug page</title>

    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.5.1/leaflet.css" />
    <!--[if lte IE 8]><link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.4.5/leaflet.ie.css" /><![endif]-->
    <script src="http://cdn.leafletjs.com/leaflet-0.5.1/leaflet.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="stylesheet" href="http://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="http://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.Default.css" />
    <!--[if lte IE 8]><link rel="stylesheet" href="http://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.Default.ie.css" /><![endif]-->
    <script src="http://leaflet.github.io/Leaflet.markercluster/dist/leaflet.markercluster-src.js"></script>
    <script src="http://leaflet.github.io/Leaflet.markercluster/example/realworld.388.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>

</head>
<style type="text/css">
    body {
        padding: 0;
        margin: 0;
    }
    html, body, #map {
        height: 100%;
    }
</style>
<body>

    <div id="map"></div>
    <span>Mouse over a cluster to see the bounds of its children and click a cluster to zoom to those bounds</span>
    <script type="text/javascript">
        var tweets = {};
        var docRange = 50;

        var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png',
            cloudmadeAttribution = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade, Points &copy 2012 LINZ',
            cloudmade = new L.TileLayer(cloudmadeUrl, {maxZoom: 17, attribution: cloudmadeAttribution});

        var map = new L.Map('map', {layers: [cloudmade]});

        map.locate({setView: true, maxZoom: 13});

        map.on('locationfound', function(e) {
            docRange = newRange();
            goGetEm(docRange);
        });

        map.on('moveend', function(e) {
            docRange = newRange();
            goGetEm(docRange);
        });

        function goGetEm(range) {
            var markers = new L.MarkerClusterGroup();

            $.get('/twitter/' + map.getCenter().lat + '/' + map.getCenter().lng + '/' + range + '?limit=2000', function(data) {
                if (data.tweets.length > 0) {
                    for (var i = 0; i < data.tweets.length; i++) {
                        var a = data.tweets[i];
                        if (tweets[a.tweet_id] != null) {

                            return;
                        }
                        else {
                            tweets[a.tweet_id] = a;
                            var title = a.text;
                            var marker = new L.Marker(new L.LatLng(a.geo.coordinates[1], a.geo.coordinates[0]), { title: title });
                            marker.bindPopup(title);
                            markers.addLayer(marker);
                        }
                    }

                    map.addLayer(markers);
                }
            });            
        }

        function newRange() {
            var bounds = map.getBounds();
            var southWest = bounds._southWest;
            var northEast = bounds._northEast;
            var boundsDistance = getDistanceFromLatLonInKm(southWest.lat, southWest.lng, northEast.lat, northEast.lng);
            return boundsDistance;
        }

        function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {
            var R = 6371; // Radius of the earth in km
            var dLat = deg2rad(lat2-lat1);  // deg2rad below
            var dLon = deg2rad(lon2-lon1); 
            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
            var d = R * c; // Distance in km
            return d;
        }

        function deg2rad(deg) {
            return deg * (Math.PI/180);
        }

    </script>
</body>
</html>
